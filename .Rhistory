library(readr)
library(dplyr)
library(ggplot2)
library(reshape2)
# Define column names
column1 <- c("machine_name", "cycle", "operational_setting_1", "operational_setting_2", "operational_setting_3")
column2 <- paste0("sensor_measurement_", sprintf("%02d", 1:21))
columns <- c(column1, column2)
# Read Data
turbofan_df <- read_delim("data/train_FD002.txt",
delim = " ", col_names = columns, show_col_types = FALSE, trim_ws = TRUE)
# Dropping Empty Columns
turbofan_df <- turbofan_df %>%
select(-X27, -X28)
head(turbofan_df)
turbofan_df <- turbofan_df %>%
group_by(machine_name) %>%
mutate(max_cycle = max(cycle)) %>%
filter(cycle == max_cycle) %>%
ungroup()
head(turbofan_df)
# Create the lollipop plot
ggplot(turbofan_df, aes(x = machine_name, y = cycle)) +
geom_segment(aes(x = machine_name, xend = machine_name, y = 1, yend = cycle), color = 'skyblue') +
geom_point(color = 'blue', size = 1.5) +
geom_point(aes(y = 1), color = 'red', size = 1.5) +
coord_flip() +
labs(title = "Max. Cycle", x = "Machine ID", y = "Cycle") +
theme_minimal()
# Create status column
turbofan_df <- turbofan_df %>%
mutate(status = ifelse(cycle > 200, FALSE, TRUE))
head(turbofan_df)
table(turbofan_df$status)
# Calculate the squared correlation matrix and convert to long format
squared_corr <- cor(turbofan_df)^2
melted_corr <- melt(squared_corr)
# Filter for stronger correlations to reduce clutter
threshold <- 0.5 # Example threshold, adjust as needed
melted_corr_filtered <- subset(melted_corr, value >= threshold & Var1 != Var2)
# Create the heatmap
ggplot(melted_corr_filtered, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title = element_blank()) +
labs(fill = "Squared\nCorrelation") +
geom_text(aes(label = sprintf("%.2f", value)), size = 3)
library(readr)
library(dplyr)
library(ggplot2)
library(reshape2)
# Define column names
column1 <- c("machine_name", "cycle", "operational_setting_1", "operational_setting_2", "operational_setting_3")
column2 <- paste0("sensor_measurement_", sprintf("%02d", 1:21))
columns <- c(column1, column2)
# Read Data
turbofan_df <- read_delim("data/train_FD002.txt",
delim = " ", col_names = columns, show_col_types = FALSE, trim_ws = TRUE)
# Dropping Empty Columns
turbofan_df <- turbofan_df %>%
select(-X27, -X28)
head(turbofan_df)
turbofan_df <- turbofan_df %>%
group_by(machine_name) %>%
mutate(max_cycle = max(cycle)) %>%
filter(cycle == max_cycle) %>%
ungroup()
head(turbofan_df)
library(readr)
library(dplyr)
library(ggplot2)
library(reshape2)
# Define column names
column1 <- c("machine_name", "cycle", "operational_setting_1", "operational_setting_2", "operational_setting_3")
column2 <- paste0("sensor_measurement_", sprintf("%02d", 1:21))
columns <- c(column1, column2)
# Read Data
turbofan_df <- read_delim("data/train_FD002.txt",
delim = " ", col_names = columns, show_col_types = FALSE, trim_ws = TRUE)
# Dropping Empty Columns
turbofan_df <- turbofan_df %>%
select(-X27, -X28)
head(turbofan_df)
View(turbofan_df)
turbofan_df <- turbofan_df %>%
group_by(machine_name) %>%
mutate(max_cycle = max(cycle)) %>%
filter(cycle == max_cycle) %>%
ungroup()
head(turbofan_df)
View(turbofan_df)
# Create the lollipop plot
ggplot(turbofan_df, aes(x = machine_name, y = cycle)) +
geom_segment(aes(x = machine_name, xend = machine_name, y = 1, yend = cycle), color = 'skyblue') +
geom_point(color = 'blue', size = 1.5) +
geom_point(aes(y = 1), color = 'red', size = 1.5) +
coord_flip() +
labs(title = "Max. Cycle", x = "Machine ID", y = "Cycle") +
theme_minimal()
# Create status column
turbofan_df <- turbofan_df %>%
mutate(status = ifelse(cycle > 200, FALSE, TRUE))
head(turbofan_df)
View(turbofan_df)
table(turbofan_df$status)
# Calculate the squared correlation matrix and convert to long format
squared_corr <- cor(turbofan_df)^2
melted_corr <- melt(squared_corr)
# Filter for stronger correlations to reduce clutter
threshold <- 0.5 # Example threshold, adjust as needed
melted_corr_filtered <- subset(melted_corr, value >= threshold & Var1 != Var2)
# Create the heatmap
ggplot(melted_corr_filtered, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title = element_blank()) +
labs(fill = "Squared\nCorrelation") +
geom_text(aes(label = sprintf("%.2f", value)), size = 3)
# Selected numeric and category columns
selected_columns <- c("sensor_measurement_04", "sensor_measurement_11", "sensor_measurement_14", "operational_setting_3", "sensor_measurement_16", "status", "cycle")
# Assuming 'turbofan_df' is a dataframe and columns are appropriately formatted
cleaned_data <- turbofan_df[selected_columns]
# Calculate the squared correlation matrix and convert to long format
squared_corr <- cor(cleaned_data)^2
melted_corr <- melt(squared_corr)
# Filter for stronger correlations to reduce clutter
threshold <- 0.5 # Example threshold, adjust as needed
melted_corr_filtered <- subset(melted_corr, value >= threshold & Var1 != Var2)
# Create the heatmap
ggplot(melted_corr_filtered, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title = element_blank()) +
labs(fill = "Squared\nCorrelation") +
geom_text(aes(label = sprintf("%.2f", value)), size = 3)
unique_counts <- sapply(turbofan_df, function(x) length(unique(x)))
cat("Unique values count per column:\n")
for(col in names(unique_counts)) {
cat(col, ":", unique_counts[col], "\n")
}
# Change specified columns to category (factor)
turbofan_df <- turbofan_df %>%
mutate(across(c(operational_setting_3, sensor_measurement_16), as.factor))
# View information about the dataframe to confirm the changes
glimpse(turbofan_df)
library("survival")
attach(turbofan_df)
fit.surv <- survfit(Surv(max))
fit.surv <- survfit(Surv(max_cycle, status) ~ 1)
plot(fit.surv, xlab = "Cycles", ylab = "Estimated Probability for Survival")
plot(fit.op, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c (2 ,4))
fit.op <- survfit(Surv(max_cycle, status) ~ operational_setting_1)
plot(fit.op, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c (2 ,4))
legend ( " bottomleft " , levels ( sex ) , col = c (2 ,4) , lty = 1)
legend ( " bottomleft " , levels ( operational_setting_1 ) , col = c (2 ,4) , lty = 1)
plot(fit.op, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c (2 ,4), legend ( " bottomleft " , levels ( operational_setting_1 )
, col = c (2 ,4) , lty = 1))
plot(fit.op, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c (2 ,4), legend( " bottomleft " , levels ( operational_setting_1 )
, col = c (2 ,4) , lty = 1))
plot(fit.op, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c (2 ,4), legend=TRUE)
legend("topright",             # Position of the legend
legend = c("Label 1", "Label 2"),  # Labels for each line or point
col = c(2, 4),          # Colors corresponding to each label
lty = 1)
fit.op <- survfit(Surv(max_cycle, status) ~ operational_setting_1)
plot(fit.op, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c (2 ,4), legend=TRUE)
legend("topright",             # Position of the legend
legend = c("Label 1", "Label 2"),  # Labels for each line or point
col = c(2, 4),          # Colors corresponding to each label
lty = 1)
legend("topright", levels(operational_setting_1)
lty = 1)
legend("topright", levels(operational_setting_1)
,lty = 1)
legend("topright", levels(operational_setting_1), lty = 1)
legend("topright", levels(operational_setting_1), lty = 1)
plot(fit.op, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c (2 ,4), legend=TRUE)
plot(fit.op, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c (2 ,4))
legend("topright", levels(operational_setting_1), lty = 1)
library("survival")
attach(turbofan_df)
fit.surv <- survfit(Surv(max_cycle, status) ~ 1)
plot(fit.surv, xlab = "Cycles", ylab = "Estimated Probability for Survival")
fit.op <- survfit(Surv(max_cycle, status) ~ operational_setting_1)
plot(fit.op, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c (2 ,4))
legend("topright", levels(operational_setting_1), lty = 1)
legend("topright", legend = levels(operational_setting_1), lty = 1)
setwd("D:/Admission Documents/Rutgers/567 - Stat Mod/Project/survival_analysis")
library("survival")
attach(turbofan_df)
fit.surv <- survfit(Surv(max_cycle, status) ~ 1)
plot(fit.surv, xlab = "Cycles", ylab = "Estimated Probability for Survival")
fit.op <- survfit(Surv(max_cycle, status) ~ operational_setting_1)
plot(fit.op, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c (2 ,4))
legend("topright", legend = levels(operational_setting_1), lty = 1)
legend_labels <- levels(operational_setting_1)
levels(operational_setting_1)
?levels
fit.op <- survfit(Surv(max_cycle, status) ~ operational_setting_3)
plot(fit.op, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c (2 ,4))
legend_labels <- levels(operational_setting_1)
legend("topright", legend = levels(operational_setting_1), lty = 1)
levels(operational_setting_3)
legend("topright", levels(operational_setting_3), lty = 1)
legend("topright", levels(operational_setting_3), col = (2,4), lty = 1)
legend("topright", levels(operational_setting_3), col = c(2,4), lty = 1)
levels(operational_setting_3)
logrank.test <- fit.op
logrank.test
logrank.test <- survfit(Surv(max_cycle, status) ~ operational_setting_3)
logrank.test
logrank.test <- survdiff(Surv(max_cycle, status) ~ operational_setting_3)
logrank.test$
logrank.test
logrank.test
fit.sm <- survfit(Surv(max_cycle, status) ~ sensor_measurement_05)
plot(fit.sm, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c (2 ,4))
legend("topright", levels(operational_setting_3), col = c(2,4,6,8,10,12), lty = 1)
plot(fit.sm, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c c(2,4,6,8,10,12))
plot(fit.sm, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c(2,4,6,8,10,12))
legend("topright", levels(sensor_measurement_05), col = c(2,4,6,8,10,12), lty = 1)
levels(sensor_measurement_05)
levels(sensor_measurement_19)
levels(sensor_measurement_3)
levels(operational_setting_3)
levels(operational_setting_16)
levels(sensor_measurement_16)
### Operational Setting 3
fit.op <- survfit(Surv(max_cycle, status) ~ operational_setting_3)
plot(fit.op, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c (2 ,4))
legend("topright", levels(operational_setting_3), col = c(2,4), lty = 1)
logrank.test <- survdiff(Surv(max_cycle, status) ~ operational_setting_3)
logrank.test
fit.sm <- survfit(Surv(max_cycle, status) ~ sensor_measurement_16)
plot(fit.sm, xlab = "Cycles", ylab = "Estimated Probability for Survival",
col = c(2,4))
legend("topright", levels(sensor_measurement_05), col = c(2,4,6,8,10,12), lty = 1)
legend("topright", levels(sensor_measurement_16), col = c(2,4), lty = 1)
logrank.test <- survdiff(Surv(max_cycle, status) ~ operational_setting_3)
logrank.test
logrank.test <- survdiff(Surv(max_cycle, status) ~ sensor_measurement_16)
logrank.test
fit.cox <- coxph(Surv(max_cycle, status) ~ sensor_measurement_16)
summary(fit.cox)
fit.cox <- coxph(Surv(max_cycle, status) ~ .)
fit.cox <- coxph(Surv(max_cycle, status) ~ ., data = turbofan_df)
fit.cox <- coxph(Surv(max_cycle, status) ~ ., data = turbofan_df)
summary(fit.cox)
